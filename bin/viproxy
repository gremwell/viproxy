#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'viproxy'
require 'optparse'

ARGV << '--help' if ARGV.empty?

options = {}
$l_ssl_options = {}
$l_ssl_options[:do_ssl] = false
$l_ssl_options[:verify_peer] = false
$r_ssl_options = {}
$r_ssl_options[:do_ssl] = false
$r_ssl_options[:verify_peer] = false

OptionParser.new do |opts|
  opts.banner = "Usage: viproxy [options]"

  opts.on("-l", "--listen [PORT]", Integer, "Port to listen on") do |v|
    options[:listen] = v
  end

  opts.on("-d", "--duplex [host:port, ...]", Array, "List of backends to duplex data to") do |v|
    options[:duplex] = v
  end

  opts.on("-r", "--relay [hostname:port]", String, "Relay endpoint: hostname:port") do |v|
    options[:relay] = v.split(":")
  end

  opts.on("-s", "--socket [filename]", String, "Relay endpoint: unix filename") do |v|
    options[:socket] = v
  end

  {:l => $l_ssl_options, :r => $r_ssl_options}.each do |leg, ssl_options|
    opts.on("--#{leg}-ssl", "#{leg}-leg: run in SSL mode") do |v|
      ssl_options[:do_ssl] = v
    end

    opts.on("--#{leg}-sslkey [filename]", String, "#{leg}-leg: SSL certificate key file (PEM)") do |v|
      ssl_options[:private_key_file] = v
    end

    opts.on("--#{leg}-sslcert [filename]", String, "#{leg}-leg: SSL certificate file (PEM)") do |v|
      ssl_options[:cert_chain_file] = v
    end

    opts.on("--#{leg}-sni [sni hostname]", String, "#{leg}-leg: SNI hostname") do |v|
      ssl_options[:sni_hostname] = v
    end

    opts.on("--#{leg}-sslproto [protocol]", String, "#{leg}-leg: force SSL protocol version, i.e. TLSv1_2") do |v|
      ssl_options[:ssl_version] = v
    end

    opts.on("--#{leg}-ciphers [ciphers]", String, "#{leg}-leg: set SSL ciphers to use, i.e. ECDHE-RSA-AES256-GCM-SHA384") do |v|
      ssl_options[:cipher_list] = v
    end
  end

  opts.on("-f", "--logfile [filename]", String,  "Log file") do |v|
    $logfile = v
  end

  opts.on("--req-replace [filename]", String,  "Replacement file for requests") do |v|
    $replacement_req = File.new(v, "r").read
  end

  opts.on("--resp-replace [filename]", String,  "Replacement file for responses") do |v|
    $replacement_resp = File.new(v, "r").read
  end

  opts.on("-v", "--verbose", "Run in debug mode") do |v|
    options[:verbose] = v
  end

end.parse!


Proxy.start(:host => "0.0.0.0", :port => options[:listen] , :debug => options[:verbose]) do |conn|
  if options[:socket]
    conn.server :socket, :socket => options[:socket]
  else
    conn.server :relay, :host => options[:relay].first, :port => options[:relay].last.to_i
  end

  options[:duplex].each_with_index do |backend,i|
    hostname, port = backend.split(":")
    conn.server "backend_#{i}".intern, :host => hostname, :port => port.to_i
  end if options[:duplex]

  conn.on_finish do |server|
    :close if server == :relay
  end
end
